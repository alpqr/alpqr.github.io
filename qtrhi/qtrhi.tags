<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QRhiDepthStencilClearValue</name>
        <filename>qrhidepthstencilclearvalue.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiDepthStencilClearValue</name>
            <anchorfile>qrhidepthstencilclearvalue.html</anchorfile>
            <anchor>QRhiDepthStencilClearValue</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiDepthStencilClearValue</name>
            <anchorfile>qrhidepthstencilclearvalue.html</anchorfile>
            <anchor>QRhiDepthStencilClearValue-1</anchor>
            <arglist>(float d, quint32 s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>depthClearValue</name>
            <anchorfile>qrhidepthstencilclearvalue.html</anchorfile>
            <anchor>depthClearValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthClearValue</name>
            <anchorfile>qrhidepthstencilclearvalue.html</anchorfile>
            <anchor>setDepthClearValue</anchor>
            <arglist>(float d)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>stencilClearValue</name>
            <anchorfile>qrhidepthstencilclearvalue.html</anchorfile>
            <anchor>stencilClearValue</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilClearValue</name>
            <anchorfile>qrhidepthstencilclearvalue.html</anchorfile>
            <anchor>setStencilClearValue</anchor>
            <arglist>(quint32 s)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiViewport</name>
        <filename>qrhiviewport.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiViewport</name>
            <anchorfile>qrhiviewport.html</anchorfile>
            <anchor>QRhiViewport</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiViewport</name>
            <anchorfile>qrhiviewport.html</anchorfile>
            <anchor>QRhiViewport-1</anchor>
            <arglist>(float x, float y, float w, float h, float minDepth, float maxDepth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::array&lt;float, 4&gt;</type>
            <name>viewport</name>
            <anchorfile>qrhiviewport.html</anchorfile>
            <anchor>viewport</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewport</name>
            <anchorfile>qrhiviewport.html</anchorfile>
            <anchor>setViewport</anchor>
            <arglist>(float x, float y, float w, float h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>minDepth</name>
            <anchorfile>qrhiviewport.html</anchorfile>
            <anchor>minDepth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinDepth</name>
            <anchorfile>qrhiviewport.html</anchorfile>
            <anchor>setMinDepth</anchor>
            <arglist>(float minDepth)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>float</type>
            <name>maxDepth</name>
            <anchorfile>qrhiviewport.html</anchorfile>
            <anchor>maxDepth</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMaxDepth</name>
            <anchorfile>qrhiviewport.html</anchorfile>
            <anchor>setMaxDepth</anchor>
            <arglist>(float maxDepth)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiScissor</name>
        <filename>qrhiscissor.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiScissor</name>
            <anchorfile>qrhiscissor.html</anchorfile>
            <anchor>QRhiScissor</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiScissor</name>
            <anchorfile>qrhiscissor.html</anchorfile>
            <anchor>QRhiScissor-1</anchor>
            <arglist>(int x, int y, int w, int h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>std::array&lt;int, 4&gt;</type>
            <name>scissor</name>
            <anchorfile>qrhiscissor.html</anchorfile>
            <anchor>scissor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScissor</name>
            <anchorfile>qrhiscissor.html</anchorfile>
            <anchor>setScissor</anchor>
            <arglist>(int x, int y, int w, int h)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiVertexInputBinding</name>
        <filename>qrhivertexinputbinding.html</filename>
        <member kind="enum">
            <name>Classification</name>
            <anchor>Classification-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PerVertex">
            <anchor>Classification-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PerInstance">
            <anchor>Classification-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiVertexInputBinding</name>
            <anchorfile>qrhivertexinputbinding.html</anchorfile>
            <anchor>QRhiVertexInputBinding</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiVertexInputBinding</name>
            <anchorfile>qrhivertexinputbinding.html</anchorfile>
            <anchor>QRhiVertexInputBinding-1</anchor>
            <arglist>(quint32 stride, QRhiVertexInputBinding::Classification cls, int stepRate)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>stride</name>
            <anchorfile>qrhivertexinputbinding.html</anchorfile>
            <anchor>stride</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStride</name>
            <anchorfile>qrhivertexinputbinding.html</anchorfile>
            <anchor>setStride</anchor>
            <arglist>(quint32 s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiVertexInputBinding::Classification</type>
            <name>classification</name>
            <anchorfile>qrhivertexinputbinding.html</anchorfile>
            <anchor>classification</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setClassification</name>
            <anchorfile>qrhivertexinputbinding.html</anchorfile>
            <anchor>setClassification</anchor>
            <arglist>(QRhiVertexInputBinding::Classification c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>instanceStepRate</name>
            <anchorfile>qrhivertexinputbinding.html</anchorfile>
            <anchor>instanceStepRate</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setInstanceStepRate</name>
            <anchorfile>qrhivertexinputbinding.html</anchorfile>
            <anchor>setInstanceStepRate</anchor>
            <arglist>(int rate)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiVertexInputAttribute</name>
        <filename>qrhivertexinputattribute.html</filename>
        <member kind="enum">
            <name>Format</name>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Float4">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Float3">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Float2">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Float">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UNormByte4">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UNormByte2">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UNormByte">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiVertexInputAttribute</name>
            <anchorfile>qrhivertexinputattribute.html</anchorfile>
            <anchor>QRhiVertexInputAttribute</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiVertexInputAttribute</name>
            <anchorfile>qrhivertexinputattribute.html</anchorfile>
            <anchor>QRhiVertexInputAttribute-1</anchor>
            <arglist>(int binding, int location, QRhiVertexInputAttribute::Format format, quint32 offset)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>binding</name>
            <anchorfile>qrhivertexinputattribute.html</anchorfile>
            <anchor>binding</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBinding</name>
            <anchorfile>qrhivertexinputattribute.html</anchorfile>
            <anchor>setBinding</anchor>
            <arglist>(int b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>location</name>
            <anchorfile>qrhivertexinputattribute.html</anchorfile>
            <anchor>location</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLocation</name>
            <anchorfile>qrhivertexinputattribute.html</anchorfile>
            <anchor>setLocation</anchor>
            <arglist>(int loc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiVertexInputAttribute::Format</type>
            <name>format</name>
            <anchorfile>qrhivertexinputattribute.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormt</name>
            <anchorfile>qrhivertexinputattribute.html</anchorfile>
            <anchor>setFormt</anchor>
            <arglist>(QRhiVertexInputAttribute::Format f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>offset</name>
            <anchorfile>qrhivertexinputattribute.html</anchorfile>
            <anchor>offset</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setOffset</name>
            <anchorfile>qrhivertexinputattribute.html</anchorfile>
            <anchor>setOffset</anchor>
            <arglist>(quint32 ofs)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiVertexInputLayout</name>
        <filename>qrhivertexinputlayout.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiVertexInputLayout</name>
            <anchorfile>qrhivertexinputlayout.html</anchorfile>
            <anchor>QRhiVertexInputLayout</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRhiVertexInputBinding&gt;</type>
            <name>bindings</name>
            <anchorfile>qrhivertexinputlayout.html</anchorfile>
            <anchor>bindings</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBindings</name>
            <anchorfile>qrhivertexinputlayout.html</anchorfile>
            <anchor>setBindings</anchor>
            <arglist>(const QVector&lt;QRhiVertexInputBinding&gt; &amp;v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRhiVertexInputAttribute&gt;</type>
            <name>attributes</name>
            <anchorfile>qrhivertexinputlayout.html</anchorfile>
            <anchor>attributes</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAttributes</name>
            <anchorfile>qrhivertexinputlayout.html</anchorfile>
            <anchor>setAttributes</anchor>
            <arglist>(const QVector&lt;QRhiVertexInputAttribute&gt; &amp;v)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiGraphicsShaderStage</name>
        <filename>qrhigraphicsshaderstage.html</filename>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vertex">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Fragment">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Compute">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiGraphicsShaderStage</name>
            <anchorfile>qrhigraphicsshaderstage.html</anchorfile>
            <anchor>QRhiGraphicsShaderStage</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiGraphicsShaderStage</name>
            <anchorfile>qrhigraphicsshaderstage.html</anchorfile>
            <anchor>QRhiGraphicsShaderStage-1</anchor>
            <arglist>(QRhiGraphicsShaderStage::Type type, const int &amp;shader, int v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiGraphicsShaderStage::Type</type>
            <name>type</name>
            <anchorfile>qrhigraphicsshaderstage.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qrhigraphicsshaderstage.html</anchorfile>
            <anchor>setType</anchor>
            <arglist>(QRhiGraphicsShaderStage::Type t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>shader</name>
            <anchorfile>qrhigraphicsshaderstage.html</anchorfile>
            <anchor>shader</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShader</name>
            <anchorfile>qrhigraphicsshaderstage.html</anchorfile>
            <anchor>setShader</anchor>
            <arglist>(const int &amp;s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>shaderVariant</name>
            <anchorfile>qrhigraphicsshaderstage.html</anchorfile>
            <anchor>shaderVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderVariant</name>
            <anchorfile>qrhigraphicsshaderstage.html</anchorfile>
            <anchor>setShaderVariant</anchor>
            <arglist>(int v)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiShaderResourceBinding</name>
        <filename>qrhishaderresourcebinding.html</filename>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UniformBuffer">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SampledTexture">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageLoad">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageStore">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageLoadStore">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BufferLoad">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BufferStore">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BufferLoadStore">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StageFlag</name>
            <anchor>StageFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VertexStage">
            <anchor>StageFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FragmentStage">
            <anchor>StageFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ComputeStage">
            <anchor>StageFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRhiShaderResourceBinding::StageFlag">
            <name>StageFlags</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>StageFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRhiShaderResourceBinding</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>dtor.QRhiShaderResourceBinding</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLayoutCompatible</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>isLayoutCompatible</anchor>
            <arglist>(const QRhiShaderResourceBinding &amp;other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRhiShaderResourceBinding</type>
            <name>uniformBuffer</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>uniformBuffer</anchor>
            <arglist>(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiBuffer *buf)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRhiShaderResourceBinding</type>
            <name>uniformBuffer</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>uniformBuffer-1</anchor>
            <arglist>(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiBuffer *buf, int offset, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRhiShaderResourceBinding</type>
            <name>uniformBufferWithDynamicOffset</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>uniformBufferWithDynamicOffset</anchor>
            <arglist>(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiBuffer *buf, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRhiShaderResourceBinding</type>
            <name>sampledTexture</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>sampledTexture</anchor>
            <arglist>(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiTexture *tex, QRhiSampler *sampler)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRhiShaderResourceBinding</type>
            <name>imageLoad</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>imageLoad</anchor>
            <arglist>(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiTexture *tex, int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRhiShaderResourceBinding</type>
            <name>imageStore</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>imageStore</anchor>
            <arglist>(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiTexture *tex, int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRhiShaderResourceBinding</type>
            <name>imageLoadStore</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>imageLoadStore</anchor>
            <arglist>(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiTexture *tex, int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRhiShaderResourceBinding</type>
            <name>bufferLoad</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>bufferLoad</anchor>
            <arglist>(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiBuffer *buf)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRhiShaderResourceBinding</type>
            <name>bufferLoad</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>bufferLoad-1</anchor>
            <arglist>(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiBuffer *buf, int offset, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRhiShaderResourceBinding</type>
            <name>bufferStore</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>bufferStore</anchor>
            <arglist>(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiBuffer *buf)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRhiShaderResourceBinding</type>
            <name>bufferStore</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>bufferStore-1</anchor>
            <arglist>(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiBuffer *buf, int offset, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRhiShaderResourceBinding</type>
            <name>bufferLoadStore</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>bufferLoadStore</anchor>
            <arglist>(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiBuffer *buf)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRhiShaderResourceBinding</type>
            <name>bufferLoadStore</name>
            <anchorfile>qrhishaderresourcebinding.html</anchorfile>
            <anchor>bufferLoadStore-1</anchor>
            <arglist>(int binding, QRhiShaderResourceBinding::StageFlags stage, QRhiBuffer *buf, int offset, int size)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiColorAttachment</name>
        <filename>qrhicolorattachment.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiColorAttachment</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>QRhiColorAttachment</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiColorAttachment</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>QRhiColorAttachment-1</anchor>
            <arglist>(QRhiTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiColorAttachment</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>QRhiColorAttachment-2</anchor>
            <arglist>(QRhiRenderBuffer *renderBuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiTexture *</type>
            <name>texture</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>texture</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTexture</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>setTexture</anchor>
            <arglist>(QRhiTexture *tex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiRenderBuffer *</type>
            <name>renderBuffer</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>renderBuffer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderBuffer</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>setRenderBuffer</anchor>
            <arglist>(QRhiRenderBuffer *rb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layer</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>layer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayer</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>setLayer</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>level</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>level</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLevel</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>setLevel</anchor>
            <arglist>(int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiTexture *</type>
            <name>resolveTexture</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>resolveTexture</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolveTexture</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>setResolveTexture</anchor>
            <arglist>(QRhiTexture *tex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>resolveLayer</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>resolveLayer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolveLayer</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>setResolveLayer</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>resolveLevel</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>resolveLevel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setResolveLevel</name>
            <anchorfile>qrhicolorattachment.html</anchorfile>
            <anchor>setResolveLevel</anchor>
            <arglist>(int level)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiTextureRenderTargetDescription</name>
        <filename>qrhitexturerendertargetdescription.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiTextureRenderTargetDescription</name>
            <anchorfile>qrhitexturerendertargetdescription.html</anchorfile>
            <anchor>QRhiTextureRenderTargetDescription</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiTextureRenderTargetDescription</name>
            <anchorfile>qrhitexturerendertargetdescription.html</anchorfile>
            <anchor>QRhiTextureRenderTargetDescription-1</anchor>
            <arglist>(const QRhiColorAttachment &amp;colorAttachment)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiTextureRenderTargetDescription</name>
            <anchorfile>qrhitexturerendertargetdescription.html</anchorfile>
            <anchor>QRhiTextureRenderTargetDescription-2</anchor>
            <arglist>(const QRhiColorAttachment &amp;colorAttachment, QRhiRenderBuffer *depthStencilBuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiTextureRenderTargetDescription</name>
            <anchorfile>qrhitexturerendertargetdescription.html</anchorfile>
            <anchor>QRhiTextureRenderTargetDescription-3</anchor>
            <arglist>(const QRhiColorAttachment &amp;colorAttachment, QRhiTexture *depthTexture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRhiColorAttachment&gt;</type>
            <name>colorAttachments</name>
            <anchorfile>qrhitexturerendertargetdescription.html</anchorfile>
            <anchor>colorAttachments</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setColorAttachments</name>
            <anchorfile>qrhitexturerendertargetdescription.html</anchorfile>
            <anchor>setColorAttachments</anchor>
            <arglist>(const QVector&lt;QRhiColorAttachment&gt; &amp;att)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiRenderBuffer *</type>
            <name>depthStencilBuffer</name>
            <anchorfile>qrhitexturerendertargetdescription.html</anchorfile>
            <anchor>depthStencilBuffer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthStencilBuffer</name>
            <anchorfile>qrhitexturerendertargetdescription.html</anchorfile>
            <anchor>setDepthStencilBuffer</anchor>
            <arglist>(QRhiRenderBuffer *renderBuffer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiTexture *</type>
            <name>depthTexture</name>
            <anchorfile>qrhitexturerendertargetdescription.html</anchorfile>
            <anchor>depthTexture</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthTexture</name>
            <anchorfile>qrhitexturerendertargetdescription.html</anchorfile>
            <anchor>setDepthTexture</anchor>
            <arglist>(QRhiTexture *texture)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiTextureSubresourceUploadDescription</name>
        <filename>qrhitexturesubresourceuploaddescription.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiTextureSubresourceUploadDescription</name>
            <anchorfile>qrhitexturesubresourceuploaddescription.html</anchorfile>
            <anchor>QRhiTextureSubresourceUploadDescription</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiTextureSubresourceUploadDescription</name>
            <anchorfile>qrhitexturesubresourceuploaddescription.html</anchorfile>
            <anchor>QRhiTextureSubresourceUploadDescription-1</anchor>
            <arglist>(const QImage &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiTextureSubresourceUploadDescription</name>
            <anchorfile>qrhitexturesubresourceuploaddescription.html</anchorfile>
            <anchor>QRhiTextureSubresourceUploadDescription-2</anchor>
            <arglist>(const void *data, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QImage</type>
            <name>image</name>
            <anchorfile>qrhitexturesubresourceuploaddescription.html</anchorfile>
            <anchor>image</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setImage</name>
            <anchorfile>qrhitexturesubresourceuploaddescription.html</anchorfile>
            <anchor>setImage</anchor>
            <arglist>(const QImage &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>data</name>
            <anchorfile>qrhitexturesubresourceuploaddescription.html</anchorfile>
            <anchor>data</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setData</name>
            <anchorfile>qrhitexturesubresourceuploaddescription.html</anchorfile>
            <anchor>setData</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>destinationTopLeft</name>
            <anchorfile>qrhitexturesubresourceuploaddescription.html</anchorfile>
            <anchor>destinationTopLeft</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationTopLeft</name>
            <anchorfile>qrhitexturesubresourceuploaddescription.html</anchorfile>
            <anchor>setDestinationTopLeft</anchor>
            <arglist>(const QPoint &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>sourceSize</name>
            <anchorfile>qrhitexturesubresourceuploaddescription.html</anchorfile>
            <anchor>sourceSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceSize</name>
            <anchorfile>qrhitexturesubresourceuploaddescription.html</anchorfile>
            <anchor>setSourceSize</anchor>
            <arglist>(const QSize &amp;size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>sourceTopLeft</name>
            <anchorfile>qrhitexturesubresourceuploaddescription.html</anchorfile>
            <anchor>sourceTopLeft</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceTopLeft</name>
            <anchorfile>qrhitexturesubresourceuploaddescription.html</anchorfile>
            <anchor>setSourceTopLeft</anchor>
            <arglist>(const QPoint &amp;p)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiTextureUploadEntry</name>
        <filename>qrhitextureuploadentry.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiTextureUploadEntry</name>
            <anchorfile>qrhitextureuploadentry.html</anchorfile>
            <anchor>QRhiTextureUploadEntry</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiTextureUploadEntry</name>
            <anchorfile>qrhitextureuploadentry.html</anchorfile>
            <anchor>QRhiTextureUploadEntry-1</anchor>
            <arglist>(int layer, int level, const QRhiTextureSubresourceUploadDescription &amp;desc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layer</name>
            <anchorfile>qrhitextureuploadentry.html</anchorfile>
            <anchor>layer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayer</name>
            <anchorfile>qrhitextureuploadentry.html</anchorfile>
            <anchor>setLayer</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>level</name>
            <anchorfile>qrhitextureuploadentry.html</anchorfile>
            <anchor>level</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLevel</name>
            <anchorfile>qrhitextureuploadentry.html</anchorfile>
            <anchor>setLevel</anchor>
            <arglist>(int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiTextureSubresourceUploadDescription</type>
            <name>description</name>
            <anchorfile>qrhitextureuploadentry.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescription</name>
            <anchorfile>qrhitextureuploadentry.html</anchorfile>
            <anchor>setDescription</anchor>
            <arglist>(const QRhiTextureSubresourceUploadDescription &amp;desc)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiTextureUploadDescription</name>
        <filename>qrhitextureuploaddescription.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiTextureUploadDescription</name>
            <anchorfile>qrhitextureuploaddescription.html</anchorfile>
            <anchor>QRhiTextureUploadDescription</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiTextureUploadDescription</name>
            <anchorfile>qrhitextureuploaddescription.html</anchorfile>
            <anchor>QRhiTextureUploadDescription-1</anchor>
            <arglist>(const QRhiTextureUploadEntry &amp;entry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiTextureUploadDescription</name>
            <anchorfile>qrhitextureuploaddescription.html</anchorfile>
            <anchor>QRhiTextureUploadDescription-2</anchor>
            <arglist>(const QVector&lt;QRhiTextureUploadEntry&gt; &amp;entries)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRhiTextureUploadEntry&gt;</type>
            <name>entries</name>
            <anchorfile>qrhitextureuploaddescription.html</anchorfile>
            <anchor>entries</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEntries</name>
            <anchorfile>qrhitextureuploaddescription.html</anchorfile>
            <anchor>setEntries</anchor>
            <arglist>(const QVector&lt;QRhiTextureUploadEntry&gt; &amp;entries)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>append</name>
            <anchorfile>qrhitextureuploaddescription.html</anchorfile>
            <anchor>append</anchor>
            <arglist>(const QRhiTextureUploadEntry &amp;entry)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiTextureCopyDescription</name>
        <filename>qrhitexturecopydescription.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiTextureCopyDescription</name>
            <anchorfile>qrhitexturecopydescription.html</anchorfile>
            <anchor>QRhiTextureCopyDescription</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>pixelSize</name>
            <anchorfile>qrhitexturecopydescription.html</anchorfile>
            <anchor>pixelSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixelSize</name>
            <anchorfile>qrhitexturecopydescription.html</anchorfile>
            <anchor>setPixelSize</anchor>
            <arglist>(const QSize &amp;sz)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sourceLayer</name>
            <anchorfile>qrhitexturecopydescription.html</anchorfile>
            <anchor>sourceLayer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceLayer</name>
            <anchorfile>qrhitexturecopydescription.html</anchorfile>
            <anchor>setSourceLayer</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sourceLevel</name>
            <anchorfile>qrhitexturecopydescription.html</anchorfile>
            <anchor>sourceLevel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceLevel</name>
            <anchorfile>qrhitexturecopydescription.html</anchorfile>
            <anchor>setSourceLevel</anchor>
            <arglist>(int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>sourceTopLeft</name>
            <anchorfile>qrhitexturecopydescription.html</anchorfile>
            <anchor>sourceTopLeft</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceTopLeft</name>
            <anchorfile>qrhitexturecopydescription.html</anchorfile>
            <anchor>setSourceTopLeft</anchor>
            <arglist>(const QPoint &amp;p)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>destinationLayer</name>
            <anchorfile>qrhitexturecopydescription.html</anchorfile>
            <anchor>destinationLayer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationLayer</name>
            <anchorfile>qrhitexturecopydescription.html</anchorfile>
            <anchor>setDestinationLayer</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>destinationLevel</name>
            <anchorfile>qrhitexturecopydescription.html</anchorfile>
            <anchor>destinationLevel</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationLevel</name>
            <anchorfile>qrhitexturecopydescription.html</anchorfile>
            <anchor>setDestinationLevel</anchor>
            <arglist>(int level)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QPoint</type>
            <name>destinationTopLeft</name>
            <anchorfile>qrhitexturecopydescription.html</anchorfile>
            <anchor>destinationTopLeft</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDestinationTopLeft</name>
            <anchorfile>qrhitexturecopydescription.html</anchorfile>
            <anchor>setDestinationTopLeft</anchor>
            <arglist>(const QPoint &amp;p)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiReadbackDescription</name>
        <filename>qrhireadbackdescription.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiReadbackDescription</name>
            <anchorfile>qrhireadbackdescription.html</anchorfile>
            <anchor>QRhiReadbackDescription</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiReadbackDescription</name>
            <anchorfile>qrhireadbackdescription.html</anchorfile>
            <anchor>QRhiReadbackDescription-1</anchor>
            <arglist>(QRhiTexture *texture)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiTexture *</type>
            <name>texture</name>
            <anchorfile>qrhireadbackdescription.html</anchorfile>
            <anchor>texture</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTexture</name>
            <anchorfile>qrhireadbackdescription.html</anchorfile>
            <anchor>setTexture</anchor>
            <arglist>(QRhiTexture *tex)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>layer</name>
            <anchorfile>qrhireadbackdescription.html</anchorfile>
            <anchor>layer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLayer</name>
            <anchorfile>qrhireadbackdescription.html</anchorfile>
            <anchor>setLayer</anchor>
            <arglist>(int layer)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>level</name>
            <anchorfile>qrhireadbackdescription.html</anchorfile>
            <anchor>level</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setLevel</name>
            <anchorfile>qrhireadbackdescription.html</anchorfile>
            <anchor>setLevel</anchor>
            <arglist>(int level)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiNativeHandles</name>
        <filename>qrhinativehandles.html</filename>
    </compound>
    <compound kind="class">
        <name>QRhiResource</name>
        <filename>qrhiresource.html</filename>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Buffer">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Texture">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sampler">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RenderBuffer">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RenderPassDescriptor">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RenderTarget">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextureRenderTarget">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ShaderResourceBindings">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GraphicsPipeline">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SwapChain">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ComputePipeline">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CommandBuffer">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual </type>
            <name>~QRhiResource</name>
            <anchorfile>qrhiresource.html</anchorfile>
            <anchor>dtor.QRhiResource</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QRhiResource::Type</type>
            <name>resourceType</name>
            <anchorfile>qrhiresource.html</anchorfile>
            <anchor>resourceType</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual void</type>
            <name>release</name>
            <anchorfile>qrhiresource.html</anchorfile>
            <anchor>release</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>releaseAndDestroyLater</name>
            <anchorfile>qrhiresource.html</anchorfile>
            <anchor>releaseAndDestroyLater</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>name</name>
            <anchorfile>qrhiresource.html</anchorfile>
            <anchor>name</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setName</name>
            <anchorfile>qrhiresource.html</anchorfile>
            <anchor>setName</anchor>
            <arglist>(const QByteArray &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint64</type>
            <name>globalResourceId</name>
            <anchorfile>qrhiresource.html</anchorfile>
            <anchor>globalResourceId</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type></type>
            <name>QRhiResource</name>
            <anchorfile>qrhiresource.html</anchorfile>
            <anchor>QRhiResource</anchor>
            <arglist>(const QRhiResource &amp;)</arglist>
        </member>
        <member kind="function" protection="protected" virtualness="non" static="no">
            <type>QRhiResource &amp;</type>
            <name>operator=</name>
            <anchorfile>qrhiresource.html</anchorfile>
            <anchor>operator-eq</anchor>
            <arglist>(const QRhiResource &amp;)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiBuffer</name>
        <filename>qrhibuffer.html</filename>
        <base>QRhiResource</base>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Immutable">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Static">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Dynamic">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>UsageFlag</name>
            <anchor>UsageFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VertexBuffer">
            <anchor>UsageFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IndexBuffer">
            <anchor>UsageFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UniformBuffer">
            <anchor>UsageFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StorageBuffer">
            <anchor>UsageFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRhiBuffer::UsageFlag">
            <name>UsageFlags</name>
            <anchorfile>qrhibuffer.html</anchorfile>
            <anchor>UsageFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRhiResource::Type</type>
            <name>resourceType</name>
            <anchorfile>qrhibuffer.html</anchorfile>
            <anchor>resourceType</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiBuffer::Type</type>
            <name>type</name>
            <anchorfile>qrhibuffer.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qrhibuffer.html</anchorfile>
            <anchor>setType</anchor>
            <arglist>(QRhiBuffer::Type t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiBuffer::UsageFlags</type>
            <name>usage</name>
            <anchorfile>qrhibuffer.html</anchorfile>
            <anchor>usage</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setUsage</name>
            <anchorfile>qrhibuffer.html</anchorfile>
            <anchor>setUsage</anchor>
            <arglist>(QRhiBuffer::UsageFlags u)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>size</name>
            <anchorfile>qrhibuffer.html</anchorfile>
            <anchor>size</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSize</name>
            <anchorfile>qrhibuffer.html</anchorfile>
            <anchor>setSize</anchor>
            <arglist>(int sz)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>build</name>
            <anchorfile>qrhibuffer.html</anchorfile>
            <anchor>build</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiTexture</name>
        <filename>qrhitexture.html</filename>
        <base>QRhiResource</base>
        <member kind="enum">
            <name>Flag</name>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RenderTarget">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CubeMap">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MipMapped">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="sRGB">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UsedAsTransferSource">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UsedWithGenerateMips">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UsedWithLoadStore">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRhiTexture::Flag">
            <name>Flags</name>
            <anchorfile>qrhitexture.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Format</name>
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UnknownFormat">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA8">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BGRA8">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R8">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R16">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RED_OR_ALPHA8">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA16F">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RGBA32F">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="D16">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="D32F">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BC1">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BC2">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BC3">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BC4">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BC5">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BC6H">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BC7">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ETC2_RGB8">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ETC2_RGB8A1">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ETC2_RGBA8">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ASTC_4x4">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ASTC_5x4">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ASTC_5x5">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ASTC_6x5">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ASTC_6x6">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ASTC_8x5">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ASTC_8x6">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ASTC_8x8">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ASTC_10x5">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ASTC_10x6">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ASTC_10x8">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ASTC_10x10">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ASTC_12x10">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ASTC_12x12">
            <anchor>Format-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRhiResource::Type</type>
            <name>resourceType</name>
            <anchorfile>qrhitexture.html</anchorfile>
            <anchor>resourceType</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiTexture::Format</type>
            <name>format</name>
            <anchorfile>qrhitexture.html</anchorfile>
            <anchor>format</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFormat</name>
            <anchorfile>qrhitexture.html</anchorfile>
            <anchor>setFormat</anchor>
            <arglist>(QRhiTexture::Format fmt)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>pixelSize</name>
            <anchorfile>qrhitexture.html</anchorfile>
            <anchor>pixelSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixelSize</name>
            <anchorfile>qrhitexture.html</anchorfile>
            <anchor>setPixelSize</anchor>
            <arglist>(const QSize &amp;sz)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiTexture::Flags</type>
            <name>flags</name>
            <anchorfile>qrhitexture.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qrhitexture.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(QRhiTexture::Flags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sampleCount</name>
            <anchorfile>qrhitexture.html</anchorfile>
            <anchor>sampleCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSampleCount</name>
            <anchorfile>qrhitexture.html</anchorfile>
            <anchor>setSampleCount</anchor>
            <arglist>(int s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>build</name>
            <anchorfile>qrhitexture.html</anchorfile>
            <anchor>build</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual const QRhiNativeHandles *</type>
            <name>nativeHandles</name>
            <anchorfile>qrhitexture.html</anchorfile>
            <anchor>nativeHandles</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual bool</type>
            <name>buildFrom</name>
            <anchorfile>qrhitexture.html</anchorfile>
            <anchor>buildFrom</anchor>
            <arglist>(const QRhiNativeHandles *src)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiSampler</name>
        <filename>qrhisampler.html</filename>
        <base>QRhiResource</base>
        <member kind="enum">
            <name>Filter</name>
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Nearest">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Linear">
            <anchor>Filter-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>AddressMode</name>
            <anchor>AddressMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Repeat">
            <anchor>AddressMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ClampToEdge">
            <anchor>AddressMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Border">
            <anchor>AddressMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mirror">
            <anchor>AddressMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MirrorOnce">
            <anchor>AddressMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CompareOp</name>
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Never">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Less">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Equal">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LessOrEqual">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Greater">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotEqual">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GreaterOrEqual">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Always">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRhiResource::Type</type>
            <name>resourceType</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>resourceType</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiSampler::Filter</type>
            <name>magFilter</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>magFilter</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMagFilter</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>setMagFilter</anchor>
            <arglist>(QRhiSampler::Filter f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiSampler::Filter</type>
            <name>minFilter</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>minFilter</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMinFilter</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>setMinFilter</anchor>
            <arglist>(QRhiSampler::Filter f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiSampler::Filter</type>
            <name>mipmapMode</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>mipmapMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setMipmapMode</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>setMipmapMode</anchor>
            <arglist>(QRhiSampler::Filter f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiSampler::AddressMode</type>
            <name>addressU</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>addressU</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddressU</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>setAddressU</anchor>
            <arglist>(QRhiSampler::AddressMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiSampler::AddressMode</type>
            <name>addressV</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>addressV</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddressV</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>setAddressV</anchor>
            <arglist>(QRhiSampler::AddressMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiSampler::AddressMode</type>
            <name>addressW</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>addressW</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setAddressW</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>setAddressW</anchor>
            <arglist>(QRhiSampler::AddressMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiSampler::CompareOp</type>
            <name>textureCompareOp</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>textureCompareOp</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTextureCompareOp</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>setTextureCompareOp</anchor>
            <arglist>(QRhiSampler::CompareOp op)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>build</name>
            <anchorfile>qrhisampler.html</anchorfile>
            <anchor>build</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiRenderBuffer</name>
        <filename>qrhirenderbuffer.html</filename>
        <base>QRhiResource</base>
        <member kind="enum">
            <name>Type</name>
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DepthStencil">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Color">
            <anchor>Type-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Flag</name>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UsedWithSwapChainOnly">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRhiRenderBuffer::Flag">
            <name>Flags</name>
            <anchorfile>qrhirenderbuffer.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRhiResource::Type</type>
            <name>resourceType</name>
            <anchorfile>qrhirenderbuffer.html</anchorfile>
            <anchor>resourceType</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiRenderBuffer::Type</type>
            <name>type</name>
            <anchorfile>qrhirenderbuffer.html</anchorfile>
            <anchor>type</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setType</name>
            <anchorfile>qrhirenderbuffer.html</anchorfile>
            <anchor>setType</anchor>
            <arglist>(QRhiRenderBuffer::Type t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>pixelSize</name>
            <anchorfile>qrhirenderbuffer.html</anchorfile>
            <anchor>pixelSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setPixelSize</name>
            <anchorfile>qrhirenderbuffer.html</anchorfile>
            <anchor>setPixelSize</anchor>
            <arglist>(const QSize &amp;sz)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sampleCount</name>
            <anchorfile>qrhirenderbuffer.html</anchorfile>
            <anchor>sampleCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSampleCount</name>
            <anchorfile>qrhirenderbuffer.html</anchorfile>
            <anchor>setSampleCount</anchor>
            <arglist>(int s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiRenderBuffer::Flags</type>
            <name>flags</name>
            <anchorfile>qrhirenderbuffer.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qrhirenderbuffer.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(QRhiRenderBuffer::Flags h)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>build</name>
            <anchorfile>qrhirenderbuffer.html</anchorfile>
            <anchor>build</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiRenderPassDescriptor</name>
        <filename>qrhirenderpassdescriptor.html</filename>
        <base>QRhiResource</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRhiResource::Type</type>
            <name>resourceType</name>
            <anchorfile>qrhirenderpassdescriptor.html</anchorfile>
            <anchor>resourceType</anchor>
            <arglist>() const const override</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiRenderTarget</name>
        <filename>qrhirendertarget.html</filename>
        <base>QRhiResource</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRhiResource::Type</type>
            <name>resourceType</name>
            <anchorfile>qrhirendertarget.html</anchorfile>
            <anchor>resourceType</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSize</type>
            <name>pixelSize</name>
            <anchorfile>qrhirendertarget.html</anchorfile>
            <anchor>pixelSize</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual float</type>
            <name>devicePixelRatio</name>
            <anchorfile>qrhirendertarget.html</anchorfile>
            <anchor>devicePixelRatio</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual int</type>
            <name>sampleCount</name>
            <anchorfile>qrhirendertarget.html</anchorfile>
            <anchor>sampleCount</anchor>
            <arglist>() const const = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiRenderPassDescriptor *</type>
            <name>renderPassDescriptor</name>
            <anchorfile>qrhirendertarget.html</anchorfile>
            <anchor>renderPassDescriptor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderPassDescriptor</name>
            <anchorfile>qrhirendertarget.html</anchorfile>
            <anchor>setRenderPassDescriptor</anchor>
            <arglist>(QRhiRenderPassDescriptor *desc)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiTextureRenderTarget</name>
        <filename>qrhitexturerendertarget.html</filename>
        <base>QRhiRenderTarget</base>
        <member kind="enum">
            <name>Flag</name>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreserveColorContents">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PreserveDepthStencilContents">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRhiTextureRenderTarget::Flag">
            <name>Flags</name>
            <anchorfile>qrhitexturerendertarget.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRhiResource::Type</type>
            <name>resourceType</name>
            <anchorfile>qrhitexturerendertarget.html</anchorfile>
            <anchor>resourceType</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiTextureRenderTargetDescription</type>
            <name>description</name>
            <anchorfile>qrhitexturerendertarget.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescription</name>
            <anchorfile>qrhitexturerendertarget.html</anchorfile>
            <anchor>setDescription</anchor>
            <arglist>(const QRhiTextureRenderTargetDescription &amp;desc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiTextureRenderTarget::Flags</type>
            <name>flags</name>
            <anchorfile>qrhitexturerendertarget.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qrhitexturerendertarget.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(QRhiTextureRenderTarget::Flags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QRhiRenderPassDescriptor *</type>
            <name>newCompatibleRenderPassDescriptor</name>
            <anchorfile>qrhitexturerendertarget.html</anchorfile>
            <anchor>newCompatibleRenderPassDescriptor</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>build</name>
            <anchorfile>qrhitexturerendertarget.html</anchorfile>
            <anchor>build</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiShaderResourceBindings</name>
        <filename>qrhishaderresourcebindings.html</filename>
        <base>QRhiResource</base>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRhiResource::Type</type>
            <name>resourceType</name>
            <anchorfile>qrhishaderresourcebindings.html</anchorfile>
            <anchor>resourceType</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRhiShaderResourceBinding&gt;</type>
            <name>bindings</name>
            <anchorfile>qrhishaderresourcebindings.html</anchorfile>
            <anchor>bindings</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBindings</name>
            <anchorfile>qrhishaderresourcebindings.html</anchorfile>
            <anchor>setBindings</anchor>
            <arglist>(const QVector&lt;QRhiShaderResourceBinding&gt; &amp;b)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isLayoutCompatible</name>
            <anchorfile>qrhishaderresourcebindings.html</anchorfile>
            <anchor>isLayoutCompatible</anchor>
            <arglist>(const QRhiShaderResourceBindings *other) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>build</name>
            <anchorfile>qrhishaderresourcebindings.html</anchorfile>
            <anchor>build</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiGraphicsPipeline</name>
        <filename>qrhigraphicspipeline.html</filename>
        <base>QRhiResource</base>
        <member kind="enum">
            <name>Flag</name>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UsesBlendConstants">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UsesStencilRef">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UsesScissor">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRhiGraphicsPipeline::Flag">
            <name>Flags</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Topology</name>
            <anchor>Topology-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Triangles">
            <anchor>Topology-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TriangleStrip">
            <anchor>Topology-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Lines">
            <anchor>Topology-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LineStrip">
            <anchor>Topology-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Points">
            <anchor>Topology-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>CullMode</name>
            <anchor>CullMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="None">
            <anchor>CullMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Front">
            <anchor>CullMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Back">
            <anchor>CullMode-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FrontFace</name>
            <anchor>FrontFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CCW">
            <anchor>FrontFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CW">
            <anchor>FrontFace-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ColorMaskComponent</name>
            <anchor>ColorMaskComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="R">
            <anchor>ColorMaskComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="G">
            <anchor>ColorMaskComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="B">
            <anchor>ColorMaskComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="A">
            <anchor>ColorMaskComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRhiGraphicsPipeline::ColorMaskComponent">
            <name>ColorMask</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>ColorMaskComponent-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>BlendFactor</name>
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Zero">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="One">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SrcColor">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusSrcColor">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DstColor">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusDstColor">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SrcAlpha">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusSrcAlpha">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DstAlpha">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusDstAlpha">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConstantColor">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusConstantColor">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ConstantAlpha">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusConstantAlpha">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SrcAlphaSaturate">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Src1Color">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusSrc1Color">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Src1Alpha">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OneMinusSrc1Alpha">
            <anchor>BlendFactor-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>BlendOp</name>
            <anchor>BlendOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Add">
            <anchor>BlendOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Subtract">
            <anchor>BlendOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReverseSubtract">
            <anchor>BlendOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Min">
            <anchor>BlendOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Max">
            <anchor>BlendOp-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QRhiGraphicsPipeline::TargetBlend</class>
        <member kind="enum">
            <name>CompareOp</name>
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Never">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Less">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Equal">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="LessOrEqual">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Greater">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NotEqual">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GreaterOrEqual">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Always">
            <anchor>CompareOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>StencilOp</name>
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StencilZero">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Keep">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Replace">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IncrementAndClamp">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DecrementAndClamp">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Invert">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IncrementAndWrap">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DecrementAndWrap">
            <anchor>StencilOp-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QRhiGraphicsPipeline::StencilOpState</class>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRhiResource::Type</type>
            <name>resourceType</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>resourceType</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiGraphicsPipeline::Flags</type>
            <name>flags</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(QRhiGraphicsPipeline::Flags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiGraphicsPipeline::Topology</type>
            <name>topology</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>topology</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTopology</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setTopology</anchor>
            <arglist>(QRhiGraphicsPipeline::Topology t)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiGraphicsPipeline::CullMode</type>
            <name>cullMode</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>cullMode</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setCullMode</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setCullMode</anchor>
            <arglist>(QRhiGraphicsPipeline::CullMode mode)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiGraphicsPipeline::FrontFace</type>
            <name>frontFace</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>frontFace</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrontFace</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setFrontFace</anchor>
            <arglist>(QRhiGraphicsPipeline::FrontFace f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRhiGraphicsPipeline::TargetBlend&gt;</type>
            <name>targetBlends</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>targetBlends</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setTargetBlends</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setTargetBlends</anchor>
            <arglist>(const QVector&lt;QRhiGraphicsPipeline::TargetBlend&gt; &amp;blends)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasDepthTest</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>hasDepthTest</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthTest</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setDepthTest</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasDepthWrite</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>hasDepthWrite</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthWrite</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setDepthWrite</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiGraphicsPipeline::CompareOp</type>
            <name>depthOp</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>depthOp</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthOp</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setDepthOp</anchor>
            <arglist>(QRhiGraphicsPipeline::CompareOp op)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>hasStencilTest</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>hasStencilTest</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilTest</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setStencilTest</anchor>
            <arglist>(bool enable)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiGraphicsPipeline::StencilOpState</type>
            <name>stencilFront</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>stencilFront</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilFront</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setStencilFront</anchor>
            <arglist>(const QRhiGraphicsPipeline::StencilOpState &amp;state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiGraphicsPipeline::StencilOpState</type>
            <name>stencilBack</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>stencilBack</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilBack</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setStencilBack</anchor>
            <arglist>(const QRhiGraphicsPipeline::StencilOpState &amp;state)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>stencilReadMask</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>stencilReadMask</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilReadMask</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setStencilReadMask</anchor>
            <arglist>(quint32 mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>quint32</type>
            <name>stencilWriteMask</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>stencilWriteMask</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilWriteMask</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setStencilWriteMask</anchor>
            <arglist>(quint32 mask)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sampleCount</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>sampleCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSampleCount</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setSampleCount</anchor>
            <arglist>(int s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QRhiGraphicsShaderStage&gt;</type>
            <name>shaderStages</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>shaderStages</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderStages</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setShaderStages</anchor>
            <arglist>(const QVector&lt;QRhiGraphicsShaderStage&gt; &amp;stages)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiVertexInputLayout</type>
            <name>vertexInputLayout</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>vertexInputLayout</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVertexInputLayout</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setVertexInputLayout</anchor>
            <arglist>(const QRhiVertexInputLayout &amp;layout)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiShaderResourceBindings *</type>
            <name>shaderResourceBindings</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>shaderResourceBindings</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderResourceBindings</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setShaderResourceBindings</anchor>
            <arglist>(QRhiShaderResourceBindings *srb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiRenderPassDescriptor *</type>
            <name>renderPassDescriptor</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>renderPassDescriptor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderPassDescriptor</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>setRenderPassDescriptor</anchor>
            <arglist>(QRhiRenderPassDescriptor *desc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>build</name>
            <anchorfile>qrhigraphicspipeline.html</anchorfile>
            <anchor>build</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiGraphicsPipeline::TargetBlend</name>
        <filename>qrhigraphicspipeline-targetblend.html</filename>
    </compound>
    <compound kind="class">
        <name>QRhiGraphicsPipeline::StencilOpState</name>
        <filename>qrhigraphicspipeline-stencilopstate.html</filename>
    </compound>
    <compound kind="class">
        <name>QRhiSwapChain</name>
        <filename>qrhiswapchain.html</filename>
        <base>QRhiResource</base>
        <member kind="enum">
            <name>Flag</name>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SurfaceHasPreMulAlpha">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SurfaceHasNonPreMulAlpha">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="sRGB">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="UsedAsTransferSource">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NoVSync">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MinimalBufferCount">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRhiSwapChain::Flag">
            <name>Flags</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRhiResource::Type</type>
            <name>resourceType</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>resourceType</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QWindow *</type>
            <name>window</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>window</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setWindow</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>setWindow</anchor>
            <arglist>(QWindow *window)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiSwapChain::Flags</type>
            <name>flags</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(QRhiSwapChain::Flags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiRenderBuffer *</type>
            <name>depthStencil</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>depthStencil</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDepthStencil</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>setDepthStencil</anchor>
            <arglist>(QRhiRenderBuffer *ds)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>sampleCount</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>sampleCount</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSampleCount</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>setSampleCount</anchor>
            <arglist>(int samples)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiRenderPassDescriptor *</type>
            <name>renderPassDescriptor</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>renderPassDescriptor</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setRenderPassDescriptor</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>setRenderPassDescriptor</anchor>
            <arglist>(QRhiRenderPassDescriptor *desc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>currentPixelSize</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>currentPixelSize</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QRhiCommandBuffer *</type>
            <name>currentFrameCommandBuffer</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>currentFrameCommandBuffer</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QRhiRenderTarget *</type>
            <name>currentFrameRenderTarget</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>currentFrameRenderTarget</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QSize</type>
            <name>surfacePixelSize</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>surfacePixelSize</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual QRhiRenderPassDescriptor *</type>
            <name>newCompatibleRenderPassDescriptor</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>newCompatibleRenderPassDescriptor</anchor>
            <arglist>() = 0</arglist>
        </member>
        <member kind="function" protection="public" virtualness="pure" static="no">
            <type>virtual bool</type>
            <name>buildOrResize</name>
            <anchorfile>qrhiswapchain.html</anchorfile>
            <anchor>buildOrResize</anchor>
            <arglist>() = 0</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiCommandBuffer</name>
        <filename>qrhicommandbuffer.html</filename>
        <base>QRhiResource</base>
        <member kind="enum">
            <name>IndexFormat</name>
            <anchor>IndexFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IndexUInt16">
            <anchor>IndexFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="IndexUInt32">
            <anchor>IndexFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="virtual" static="no">
            <type>virtual QRhiResource::Type</type>
            <name>resourceType</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>resourceType</anchor>
            <arglist>() const const override</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>resourceUpdate</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>resourceUpdate</anchor>
            <arglist>(QRhiResourceUpdateBatch *resourceUpdates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginPass</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>beginPass</anchor>
            <arglist>(QRhiRenderTarget *rt, const QColor &amp;colorClearValue, const QRhiDepthStencilClearValue &amp;depthStencilClearValue, QRhiResourceUpdateBatch *resourceUpdates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endPass</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>endPass</anchor>
            <arglist>(QRhiResourceUpdateBatch *resourceUpdates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGraphicsPipeline</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>setGraphicsPipeline</anchor>
            <arglist>(QRhiGraphicsPipeline *ps)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>DynamicOffset</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>DynamicOffset-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShaderResources</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>setShaderResources</anchor>
            <arglist>(QRhiShaderResourceBindings *srb, int dynamicOffsetCount, const QRhiCommandBuffer::DynamicOffset *dynamicOffsets)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>VertexInput</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>VertexInput-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVertexInput</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>setVertexInput</anchor>
            <arglist>(int startBinding, int bindingCount, const QRhiCommandBuffer::VertexInput *bindings, QRhiBuffer *indexBuf, quint32 indexOffset, QRhiCommandBuffer::IndexFormat indexFormat)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setViewport</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>setViewport</anchor>
            <arglist>(const QRhiViewport &amp;viewport)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setScissor</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>setScissor</anchor>
            <arglist>(const QRhiScissor &amp;scissor)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setBlendConstants</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>setBlendConstants</anchor>
            <arglist>(const QColor &amp;c)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStencilRef</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>setStencilRef</anchor>
            <arglist>(quint32 refValue)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>draw</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>draw</anchor>
            <arglist>(quint32 vertexCount, quint32 instanceCount, quint32 firstVertex, quint32 firstInstance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>drawIndexed</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>drawIndexed</anchor>
            <arglist>(quint32 indexCount, quint32 instanceCount, quint32 firstIndex, qint32 vertexOffset, quint32 firstInstance)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>debugMarkBegin</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>debugMarkBegin</anchor>
            <arglist>(const QByteArray &amp;name)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>debugMarkEnd</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>debugMarkEnd</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>debugMarkMsg</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>debugMarkMsg</anchor>
            <arglist>(const QByteArray &amp;msg)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginComputePass</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>beginComputePass</anchor>
            <arglist>(QRhiResourceUpdateBatch *resourceUpdates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endComputePass</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>endComputePass</anchor>
            <arglist>(QRhiResourceUpdateBatch *resourceUpdates)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setComputePipeline</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>setComputePipeline</anchor>
            <arglist>(QRhiComputePipeline *ps)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>dispatch</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>dispatch</anchor>
            <arglist>(int x, int y, int z)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRhiNativeHandles *</type>
            <name>nativeHandles</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>nativeHandles</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>beginExternal</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>beginExternal</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>endExternal</name>
            <anchorfile>qrhicommandbuffer.html</anchorfile>
            <anchor>endExternal</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiReadbackResult</name>
        <filename>qrhireadbackresult.html</filename>
    </compound>
    <compound kind="class">
        <name>QRhiResourceUpdateBatch</name>
        <filename>qrhiresourceupdatebatch.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRhiResourceUpdateBatch</name>
            <anchorfile>qrhiresourceupdatebatch.html</anchorfile>
            <anchor>dtor.QRhiResourceUpdateBatch</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>release</name>
            <anchorfile>qrhiresourceupdatebatch.html</anchorfile>
            <anchor>release</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>merge</name>
            <anchorfile>qrhiresourceupdatebatch.html</anchorfile>
            <anchor>merge</anchor>
            <arglist>(QRhiResourceUpdateBatch *other)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>updateDynamicBuffer</name>
            <anchorfile>qrhiresourceupdatebatch.html</anchorfile>
            <anchor>updateDynamicBuffer</anchor>
            <arglist>(QRhiBuffer *buf, int offset, int size, const void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>uploadStaticBuffer</name>
            <anchorfile>qrhiresourceupdatebatch.html</anchorfile>
            <anchor>uploadStaticBuffer</anchor>
            <arglist>(QRhiBuffer *buf, int offset, int size, const void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>uploadStaticBuffer</name>
            <anchorfile>qrhiresourceupdatebatch.html</anchorfile>
            <anchor>uploadStaticBuffer-1</anchor>
            <arglist>(QRhiBuffer *buf, const void *data)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>uploadTexture</name>
            <anchorfile>qrhiresourceupdatebatch.html</anchorfile>
            <anchor>uploadTexture</anchor>
            <arglist>(QRhiTexture *tex, const QRhiTextureUploadDescription &amp;desc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>uploadTexture</name>
            <anchorfile>qrhiresourceupdatebatch.html</anchorfile>
            <anchor>uploadTexture-1</anchor>
            <arglist>(QRhiTexture *tex, const QImage &amp;image)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>copyTexture</name>
            <anchorfile>qrhiresourceupdatebatch.html</anchorfile>
            <anchor>copyTexture</anchor>
            <arglist>(QRhiTexture *dst, QRhiTexture *src, const QRhiTextureCopyDescription &amp;desc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>readBackTexture</name>
            <anchorfile>qrhiresourceupdatebatch.html</anchorfile>
            <anchor>readBackTexture</anchor>
            <arglist>(const QRhiReadbackDescription &amp;rb, QRhiReadbackResult *result)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>generateMips</name>
            <anchorfile>qrhiresourceupdatebatch.html</anchorfile>
            <anchor>generateMips</anchor>
            <arglist>(QRhiTexture *tex, int layer)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiInitParams</name>
        <filename>qrhiinitparams.html</filename>
    </compound>
    <compound kind="class">
        <name>QRhi</name>
        <filename>qrhi.html</filename>
        <member kind="enum">
            <name>Implementation</name>
            <anchor>Implementation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Null">
            <anchor>Implementation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vulkan">
            <anchor>Implementation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="OpenGLES2">
            <anchor>Implementation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="D3D11">
            <anchor>Implementation-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Metal">
            <anchor>Implementation-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Flag</name>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EnableProfiling">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="EnableDebugMarkers">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRhi::Flag">
            <name>Flags</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>FrameOpResult</name>
            <anchor>FrameOpResult-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameOpSuccess">
            <anchor>FrameOpResult-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameOpError">
            <anchor>FrameOpResult-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameOpSwapChainOutOfDate">
            <anchor>FrameOpResult-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameOpDeviceLost">
            <anchor>FrameOpResult-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Feature</name>
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MultisampleTexture">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MultisampleRenderBuffer">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DebugMarkers">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Timestamps">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Instancing">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="CustomInstanceStepRate">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="PrimitiveRestart">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonDynamicUniformBuffers">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NonFourAlignedEffectiveIndexBufferOffset">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NPOTTextureRepeat">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="RedOrAlpha8IsRed">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ElementIndexUint">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Compute">
            <anchor>Feature-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>BeginFrameFlag</name>
            <anchor>BeginFrameFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRhi::BeginFrameFlag">
            <name>BeginFrameFlags</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>BeginFrameFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>EndFrameFlag</name>
            <anchor>EndFrameFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SkipPresent">
            <anchor>EndFrameFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QRhi::EndFrameFlag">
            <name>EndFrameFlags</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>EndFrameFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ResourceLimit</name>
            <anchor>ResourceLimit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextureSizeMin">
            <anchor>ResourceLimit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TextureSizeMax">
            <anchor>ResourceLimit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MaxColorAttachments">
            <anchor>ResourceLimit-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FramesInFlight">
            <anchor>ResourceLimit-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRhi</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>dtor.QRhi</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QRhi *</type>
            <name>create</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>create</anchor>
            <arglist>(QRhi::Implementation impl, QRhiInitParams *params, QRhi::Flags flags, QRhiNativeHandles *importDevice)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhi::Implementation</type>
            <name>backend</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>backend</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QThread *</type>
            <name>thread</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>thread</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="typedef" type="">
            <name>CleanupCallback</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>CleanupCallback-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addCleanupCallback</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>addCleanupCallback</anchor>
            <arglist>(const QRhi::CleanupCallback &amp;callback)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>runCleanup</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>runCleanup</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiGraphicsPipeline *</type>
            <name>newGraphicsPipeline</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>newGraphicsPipeline</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiComputePipeline *</type>
            <name>newComputePipeline</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>newComputePipeline</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiShaderResourceBindings *</type>
            <name>newShaderResourceBindings</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>newShaderResourceBindings</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiBuffer *</type>
            <name>newBuffer</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>newBuffer</anchor>
            <arglist>(QRhiBuffer::Type type, QRhiBuffer::UsageFlags usage, int size)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiRenderBuffer *</type>
            <name>newRenderBuffer</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>newRenderBuffer</anchor>
            <arglist>(QRhiRenderBuffer::Type type, const QSize &amp;pixelSize, int sampleCount, QRhiRenderBuffer::Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiTexture *</type>
            <name>newTexture</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>newTexture</anchor>
            <arglist>(QRhiTexture::Format format, const QSize &amp;pixelSize, int sampleCount, QRhiTexture::Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiSampler *</type>
            <name>newSampler</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>newSampler</anchor>
            <arglist>(QRhiSampler::Filter magFilter, QRhiSampler::Filter minFilter, QRhiSampler::Filter mipmapMode, QRhiSampler::AddressMode u, QRhiSampler::AddressMode v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiTextureRenderTarget *</type>
            <name>newTextureRenderTarget</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>newTextureRenderTarget</anchor>
            <arglist>(const QRhiTextureRenderTargetDescription &amp;desc, QRhiTextureRenderTarget::Flags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiSwapChain *</type>
            <name>newSwapChain</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>newSwapChain</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhi::FrameOpResult</type>
            <name>beginFrame</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>beginFrame</anchor>
            <arglist>(QRhiSwapChain *swapChain, QRhi::BeginFrameFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhi::FrameOpResult</type>
            <name>endFrame</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>endFrame</anchor>
            <arglist>(QRhiSwapChain *swapChain, QRhi::EndFrameFlags flags)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isRecordingFrame</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>isRecordingFrame</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>currentFrameSlot</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>currentFrameSlot</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhi::FrameOpResult</type>
            <name>beginOffscreenFrame</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>beginOffscreenFrame</anchor>
            <arglist>(QRhiCommandBuffer **cb)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhi::FrameOpResult</type>
            <name>endOffscreenFrame</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>endOffscreenFrame</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhi::FrameOpResult</type>
            <name>finish</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>finish</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiResourceUpdateBatch *</type>
            <name>nextResourceUpdateBatch</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>nextResourceUpdateBatch</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;int&gt;</type>
            <name>supportedSampleCounts</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>supportedSampleCounts</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>ubufAlignment</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>ubufAlignment</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>ubufAligned</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>ubufAligned</anchor>
            <arglist>(int v) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>mipLevelsForSize</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>mipLevelsForSize</anchor>
            <arglist>(const QSize &amp;size) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QSize</type>
            <name>sizeForMipLevel</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>sizeForMipLevel</anchor>
            <arglist>(int mipLevel, const QSize &amp;baseLevelSize) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isYUpInFramebuffer</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>isYUpInFramebuffer</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isYUpInNDC</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>isYUpInNDC</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isClipDepthZeroToOne</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>isClipDepthZeroToOne</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QMatrix4x4</type>
            <name>clipSpaceCorrMatrix</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>clipSpaceCorrMatrix</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isTextureFormatSupported</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>isTextureFormatSupported</anchor>
            <arglist>(QRhiTexture::Format format, QRhiTexture::Flags flags) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isFeatureSupported</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>isFeatureSupported</anchor>
            <arglist>(QRhi::Feature feature) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>resourceLimit</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>resourceLimit</anchor>
            <arglist>(QRhi::ResourceLimit limit) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>const QRhiNativeHandles *</type>
            <name>nativeHandles</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>nativeHandles</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiProfiler *</type>
            <name>profiler</name>
            <anchorfile>qrhi.html</anchorfile>
            <anchor>profiler</anchor>
            <arglist>()</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiD3D11InitParams</name>
        <filename>qrhid3d11initparams.html</filename>
        <base>QRhiInitParams</base>
    </compound>
    <compound kind="class">
        <name>QRhiD3D11NativeHandles</name>
        <filename>qrhid3d11nativehandles.html</filename>
        <base>QRhiNativeHandles</base>
    </compound>
    <compound kind="class">
        <name>QRhiD3D11TextureNativeHandles</name>
        <filename>qrhid3d11texturenativehandles.html</filename>
        <base>QRhiNativeHandles</base>
    </compound>
    <compound kind="class">
        <name>QRhiGles2InitParams</name>
        <filename>qrhigles2initparams.html</filename>
        <base>QRhiInitParams</base>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QRhiGles2InitParams</name>
            <anchorfile>qrhigles2initparams.html</anchorfile>
            <anchor>QRhiGles2InitParams</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QOffscreenSurface *</type>
            <name>newFallbackSurface</name>
            <anchorfile>qrhigles2initparams.html</anchorfile>
            <anchor>newFallbackSurface</anchor>
            <arglist>(const QSurfaceFormat &amp;format)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QSurfaceFormat</type>
            <name>adjustedFormat</name>
            <anchorfile>qrhigles2initparams.html</anchorfile>
            <anchor>adjustedFormat</anchor>
            <arglist>(const QSurfaceFormat &amp;format)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiGles2NativeHandles</name>
        <filename>qrhigles2nativehandles.html</filename>
        <base>QRhiNativeHandles</base>
    </compound>
    <compound kind="class">
        <name>QRhiGles2TextureNativeHandles</name>
        <filename>qrhigles2texturenativehandles.html</filename>
        <base>QRhiNativeHandles</base>
    </compound>
    <compound kind="class">
        <name>QRhiMetalInitParams</name>
        <filename>qrhimetalinitparams.html</filename>
        <base>QRhiInitParams</base>
    </compound>
    <compound kind="class">
        <name>QRhiMetalNativeHandles</name>
        <filename>qrhimetalnativehandles.html</filename>
        <base>QRhiNativeHandles</base>
    </compound>
    <compound kind="class">
        <name>QRhiMetalTextureNativeHandles</name>
        <filename>qrhimetaltexturenativehandles.html</filename>
        <base>QRhiNativeHandles</base>
    </compound>
    <compound kind="class">
        <name>QRhiMetalCommandBufferNativeHandles</name>
        <filename>qrhimetalcommandbuffernativehandles.html</filename>
        <base>QRhiNativeHandles</base>
    </compound>
    <compound kind="class">
        <name>QRhiNullInitParams</name>
        <filename>qrhinullinitparams.html</filename>
        <base>QRhiInitParams</base>
    </compound>
    <compound kind="class">
        <name>QRhiNullNativeHandles</name>
        <filename>qrhinullnativehandles.html</filename>
        <base>QRhiNativeHandles</base>
    </compound>
    <compound kind="class">
        <name>QRhiNullTextureNativeHandles</name>
        <filename>qrhinulltexturenativehandles.html</filename>
        <base>QRhiNativeHandles</base>
    </compound>
    <compound kind="class">
        <name>QRhiProfiler</name>
        <filename>qrhiprofiler.html</filename>
        <member kind="enum">
            <name>StreamOp</name>
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NewBuffer">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReleaseBuffer">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NewBufferStagingArea">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReleaseBufferStagingArea">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NewRenderBuffer">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReleaseRenderBuffer">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NewTexture">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReleaseTexture">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NewTextureStagingArea">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReleaseTextureStagingArea">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ResizeSwapChain">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReleaseSwapChain">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="NewReadbackBuffer">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReleaseReadbackBuffer">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GpuMemAllocStats">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GpuFrameTime">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameToFrameTime">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FrameBuildTime">
            <anchor>StreamOp-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QRhiProfiler</name>
            <anchorfile>qrhiprofiler.html</anchorfile>
            <anchor>dtor.QRhiProfiler</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDevice</name>
            <anchorfile>qrhiprofiler.html</anchorfile>
            <anchor>setDevice</anchor>
            <arglist>(QIODevice *device)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>addVMemAllocatorStats</name>
            <anchorfile>qrhiprofiler.html</anchorfile>
            <anchor>addVMemAllocatorStats</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>frameTimingWriteInterval</name>
            <anchorfile>qrhiprofiler.html</anchorfile>
            <anchor>frameTimingWriteInterval</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFrameTimingWriteInterval</name>
            <anchorfile>qrhiprofiler.html</anchorfile>
            <anchor>setFrameTimingWriteInterval</anchor>
            <arglist>(int frameCount)</arglist>
        </member>
        <class>QRhiProfiler::CpuTime</class>
        <class>QRhiProfiler::GpuTime</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiProfiler::CpuTime</type>
            <name>frameToFrameTimes</name>
            <anchorfile>qrhiprofiler.html</anchorfile>
            <anchor>frameToFrameTimes</anchor>
            <arglist>(QRhiSwapChain *sc) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiProfiler::CpuTime</type>
            <name>frameBuildTimes</name>
            <anchorfile>qrhiprofiler.html</anchorfile>
            <anchor>frameBuildTimes</anchor>
            <arglist>(QRhiSwapChain *sc) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QRhiProfiler::GpuTime</type>
            <name>gpuFrameTimes</name>
            <anchorfile>qrhiprofiler.html</anchorfile>
            <anchor>gpuFrameTimes</anchor>
            <arglist>(QRhiSwapChain *sc) const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QRhiProfiler::CpuTime</name>
        <filename>qrhiprofiler-cputime.html</filename>
    </compound>
    <compound kind="class">
        <name>QRhiProfiler::GpuTime</name>
        <filename>qrhiprofiler-gputime.html</filename>
    </compound>
    <compound kind="class">
        <name>QRhiVulkanInitParams</name>
        <filename>qrhivulkaninitparams.html</filename>
        <base>QRhiInitParams</base>
    </compound>
    <compound kind="class">
        <name>QRhiVulkanNativeHandles</name>
        <filename>qrhivulkannativehandles.html</filename>
        <base>QRhiNativeHandles</base>
    </compound>
    <compound kind="class">
        <name>QRhiVulkanTextureNativeHandles</name>
        <filename>qrhivulkantexturenativehandles.html</filename>
        <base>QRhiNativeHandles</base>
    </compound>
    <compound kind="class">
        <name>QRhiVulkanCommandBufferNativeHandles</name>
        <filename>qrhivulkancommandbuffernativehandles.html</filename>
        <base>QRhiNativeHandles</base>
    </compound>
    <compound kind="class">
        <name>QShaderVersion</name>
        <filename>qshaderversion.html</filename>
        <member kind="enum">
            <name>Flag</name>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GlslEs">
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QShaderVersion::Flag">
            <name>Flags</name>
            <anchorfile>qshaderversion.html</anchorfile>
            <anchor>Flag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShaderVersion</name>
            <anchorfile>qshaderversion.html</anchorfile>
            <anchor>QShaderVersion</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShaderVersion</name>
            <anchorfile>qshaderversion.html</anchorfile>
            <anchor>QShaderVersion-1</anchor>
            <arglist>(int v, QShaderVersion::Flags f)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>version</name>
            <anchorfile>qshaderversion.html</anchorfile>
            <anchor>version</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setVersion</name>
            <anchorfile>qshaderversion.html</anchorfile>
            <anchor>setVersion</anchor>
            <arglist>(int v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QShaderVersion::Flags</type>
            <name>flags</name>
            <anchorfile>qshaderversion.html</anchorfile>
            <anchor>flags</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setFlags</name>
            <anchorfile>qshaderversion.html</anchorfile>
            <anchor>setFlags</anchor>
            <arglist>(QShaderVersion::Flags f)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QShaderCode</name>
        <filename>qshadercode.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShaderCode</name>
            <anchorfile>qshadercode.html</anchorfile>
            <anchor>QShaderCode</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShaderCode</name>
            <anchorfile>qshadercode.html</anchorfile>
            <anchor>QShaderCode-1</anchor>
            <arglist>(const QByteArray &amp;code, const QByteArray &amp;entry)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>shader</name>
            <anchorfile>qshadercode.html</anchorfile>
            <anchor>shader</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShader</name>
            <anchorfile>qshadercode.html</anchorfile>
            <anchor>setShader</anchor>
            <arglist>(const QByteArray &amp;code)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>entryPoint</name>
            <anchorfile>qshadercode.html</anchorfile>
            <anchor>entryPoint</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setEntryPoint</name>
            <anchorfile>qshadercode.html</anchorfile>
            <anchor>setEntryPoint</anchor>
            <arglist>(const QByteArray &amp;entry)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QShader</name>
        <filename>qshader.html</filename>
        <member kind="enum">
            <name>Stage</name>
            <anchor>Stage-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="VertexStage">
            <anchor>Stage-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TessellationControlStage">
            <anchor>Stage-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="TessellationEvaluationStage">
            <anchor>Stage-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GeometryStage">
            <anchor>Stage-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="FragmentStage">
            <anchor>Stage-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ComputeStage">
            <anchor>Stage-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Source</name>
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SpirvShader">
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="GlslShader">
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="HlslShader">
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DxbcShader">
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MslShader">
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DxilShader">
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="MetalLibShader">
            <anchor>Source-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>Variant</name>
            <anchor>Variant-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="StandardShader">
            <anchor>Variant-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="BatchableVertexShader">
            <anchor>Variant-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShader</name>
            <anchorfile>qshader.html</anchorfile>
            <anchor>QShader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QShader</name>
            <anchorfile>qshader.html</anchorfile>
            <anchor>dtor.QShader</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qshader.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QShader::Stage</type>
            <name>stage</name>
            <anchorfile>qshader.html</anchorfile>
            <anchor>stage</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setStage</name>
            <anchorfile>qshader.html</anchorfile>
            <anchor>setStage</anchor>
            <arglist>(QShader::Stage stage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>int</type>
            <name>description</name>
            <anchorfile>qshader.html</anchorfile>
            <anchor>description</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setDescription</name>
            <anchorfile>qshader.html</anchorfile>
            <anchor>setDescription</anchor>
            <arglist>(const int &amp;desc)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QShaderKey&gt;</type>
            <name>availableShaders</name>
            <anchorfile>qshader.html</anchorfile>
            <anchor>availableShaders</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QShaderCode</type>
            <name>shader</name>
            <anchorfile>qshader.html</anchorfile>
            <anchor>shader</anchor>
            <arglist>(const QShaderKey &amp;key) const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setShader</name>
            <anchorfile>qshader.html</anchorfile>
            <anchor>setShader</anchor>
            <arglist>(const QShaderKey &amp;key, const QShaderCode &amp;shader)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>removeShader</name>
            <anchorfile>qshader.html</anchorfile>
            <anchor>removeShader</anchor>
            <arglist>(const QShaderKey &amp;key)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>serialized</name>
            <anchorfile>qshader.html</anchorfile>
            <anchor>serialized</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QShader</type>
            <name>fromSerialized</name>
            <anchorfile>qshader.html</anchorfile>
            <anchor>fromSerialized</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QShaderKey</name>
        <filename>qshaderkey.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShaderKey</name>
            <anchorfile>qshaderkey.html</anchorfile>
            <anchor>QShaderKey</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShaderKey</name>
            <anchorfile>qshaderkey.html</anchorfile>
            <anchor>QShaderKey-1</anchor>
            <arglist>(QShader::Source s, const QShaderVersion &amp;sver, QShader::Variant svar)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QShader::Source</type>
            <name>source</name>
            <anchorfile>qshaderkey.html</anchorfile>
            <anchor>source</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSource</name>
            <anchorfile>qshaderkey.html</anchorfile>
            <anchor>setSource</anchor>
            <arglist>(QShader::Source s)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QShaderVersion</type>
            <name>sourceVersion</name>
            <anchorfile>qshaderkey.html</anchorfile>
            <anchor>sourceVersion</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceVersion</name>
            <anchorfile>qshaderkey.html</anchorfile>
            <anchor>setSourceVersion</anchor>
            <arglist>(const QShaderVersion &amp;sver)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QShader::Variant</type>
            <name>sourceVariant</name>
            <anchorfile>qshaderkey.html</anchorfile>
            <anchor>sourceVariant</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceVariant</name>
            <anchorfile>qshaderkey.html</anchorfile>
            <anchor>setSourceVariant</anchor>
            <arglist>(QShader::Variant svar)</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QShaderDescription</name>
        <filename>qshaderdescription.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShaderDescription</name>
            <anchorfile>qshaderdescription.html</anchorfile>
            <anchor>QShaderDescription</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QShaderDescription</name>
            <anchorfile>qshaderdescription.html</anchorfile>
            <anchor>dtor.QShaderDescription</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>bool</type>
            <name>isValid</name>
            <anchorfile>qshaderdescription.html</anchorfile>
            <anchor>isValid</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toBinaryJson</name>
            <anchorfile>qshaderdescription.html</anchorfile>
            <anchor>toBinaryJson</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QByteArray</type>
            <name>toJson</name>
            <anchorfile>qshaderdescription.html</anchorfile>
            <anchor>toJson</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="yes">
            <type>QShaderDescription</type>
            <name>fromBinaryJson</name>
            <anchorfile>qshaderdescription.html</anchorfile>
            <anchor>fromBinaryJson</anchor>
            <arglist>(const QByteArray &amp;data)</arglist>
        </member>
        <member kind="enum">
            <name>VariableType</name>
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Unknown">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Float">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vec2">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vec3">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Vec4">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mat2">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mat2x3">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mat2x4">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mat3">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mat3x2">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mat3x4">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mat4">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mat4x2">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Mat4x3">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Int">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Int2">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Int3">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Int4">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uint">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uint2">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uint3">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Uint4">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bool">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bool2">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bool3">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Bool4">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Double">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Double2">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Double3">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Double4">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DMat2">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DMat2x3">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DMat2x4">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DMat3">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DMat3x2">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DMat3x4">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DMat4">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DMat4x2">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="DMat4x3">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sampler1D">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sampler2D">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sampler2DMS">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sampler3D">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SamplerCube">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sampler1DArray">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sampler2DArray">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sampler2DMSArray">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Sampler3DArray">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SamplerCubeArray">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SamplerRect">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="SamplerBuffer">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Image1D">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Image2D">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Image2DMS">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Image3D">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageCube">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Image1DArray">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Image2DArray">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Image2DMSArray">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Image3DArray">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageCubeArray">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageRect">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageBuffer">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="Struct">
            <anchor>VariableType-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ImageFormat</name>
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatUnknown">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRgba32f">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRgba16f">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatR32f">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRgba8">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRgba8Snorm">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRg32f">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRg16f">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatR11fG11fB10f">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatR16f">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRgba16">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRgb10A2">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRg16">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRg8">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatR16">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatR8">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRgba16Snorm">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRg16Snorm">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRg8Snorm">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatR16Snorm">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatR8Snorm">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRgba32i">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRgba16i">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRgba8i">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatR32i">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRg32i">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRg16i">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRg8i">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatR16i">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatR8i">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRgba32ui">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRgba16ui">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRgba8ui">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatR32ui">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRgb10a2ui">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRg32ui">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRg16ui">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatRg8ui">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatR16ui">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ImageFormatR8ui">
            <anchor>ImageFormat-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="enum">
            <name>ImageFlag</name>
            <anchor>ImageFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="ReadOnlyImage">
            <anchor>ImageFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member name="WriteOnlyImage">
            <anchor>ImageFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <member kind="typedef" type="QShaderDescription::ImageFlag">
            <name>ImageFlags</name>
            <anchorfile>qshaderdescription.html</anchorfile>
            <anchor>ImageFlag-enum</anchor>
            <arglist></arglist>
        </member>
        <class>QShaderDescription::InOutVariable</class>
        <class>QShaderDescription::BlockVariable</class>
        <class>QShaderDescription::UniformBlock</class>
        <class>QShaderDescription::PushConstantBlock</class>
        <class>QShaderDescription::StorageBlock</class>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QShaderDescription::InOutVariable&gt;</type>
            <name>inputVariables</name>
            <anchorfile>qshaderdescription.html</anchorfile>
            <anchor>inputVariables</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QShaderDescription::InOutVariable&gt;</type>
            <name>outputVariables</name>
            <anchorfile>qshaderdescription.html</anchorfile>
            <anchor>outputVariables</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QShaderDescription::UniformBlock&gt;</type>
            <name>uniformBlocks</name>
            <anchorfile>qshaderdescription.html</anchorfile>
            <anchor>uniformBlocks</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QShaderDescription::PushConstantBlock&gt;</type>
            <name>pushConstantBlocks</name>
            <anchorfile>qshaderdescription.html</anchorfile>
            <anchor>pushConstantBlocks</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QShaderDescription::StorageBlock&gt;</type>
            <name>storageBlocks</name>
            <anchorfile>qshaderdescription.html</anchorfile>
            <anchor>storageBlocks</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QShaderDescription::InOutVariable&gt;</type>
            <name>combinedImageSamplers</name>
            <anchorfile>qshaderdescription.html</anchorfile>
            <anchor>combinedImageSamplers</anchor>
            <arglist>() const const</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QVector&lt;QShaderDescription::InOutVariable&gt;</type>
            <name>storageImages</name>
            <anchorfile>qshaderdescription.html</anchorfile>
            <anchor>storageImages</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
    <compound kind="class">
        <name>QShaderDescription::InOutVariable</name>
        <filename>qshaderdescription-inoutvariable.html</filename>
    </compound>
    <compound kind="class">
        <name>QShaderDescription::BlockVariable</name>
        <filename>qshaderdescription-blockvariable.html</filename>
    </compound>
    <compound kind="class">
        <name>QShaderDescription::UniformBlock</name>
        <filename>qshaderdescription-uniformblock.html</filename>
    </compound>
    <compound kind="class">
        <name>QShaderDescription::PushConstantBlock</name>
        <filename>qshaderdescription-pushconstantblock.html</filename>
    </compound>
    <compound kind="class">
        <name>QShaderDescription::StorageBlock</name>
        <filename>qshaderdescription-storageblock.html</filename>
    </compound>
</tagfile>
