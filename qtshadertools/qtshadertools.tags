<?xml version="1.0" encoding="UTF-8"?>
<tagfile>
    <compound kind="class">
        <name>QShaderBaker</name>
        <filename>qshaderbaker.html</filename>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>QShaderBaker</name>
            <anchorfile>qshaderbaker.html</anchorfile>
            <anchor>QShaderBaker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type></type>
            <name>~QShaderBaker</name>
            <anchorfile>qshaderbaker.html</anchorfile>
            <anchor>dtor.QShaderBaker</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceFileName</name>
            <anchorfile>qshaderbaker.html</anchorfile>
            <anchor>setSourceFileName</anchor>
            <arglist>(const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceFileName</name>
            <anchorfile>qshaderbaker.html</anchorfile>
            <anchor>setSourceFileName-1</anchor>
            <arglist>(const QString &amp;fileName, QBakedShader::ShaderStage stage)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceDevice</name>
            <anchorfile>qshaderbaker.html</anchorfile>
            <anchor>setSourceDevice</anchor>
            <arglist>(QIODevice *device, QBakedShader::ShaderStage stage, const QString &amp;fileName)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setSourceString</name>
            <anchorfile>qshaderbaker.html</anchorfile>
            <anchor>setSourceString</anchor>
            <arglist>(const QByteArray &amp;sourceString, QBakedShader::ShaderStage stage, const QString &amp;fileName)</arglist>
        </member>
        <member kind="typedef" type="">
            <name>GeneratedShader</name>
            <anchorfile>qshaderbaker.html</anchorfile>
            <anchor>GeneratedShader-typedef</anchor>
            <arglist></arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeneratedShaders</name>
            <anchorfile>qshaderbaker.html</anchorfile>
            <anchor>setGeneratedShaders</anchor>
            <arglist>(const QVector&lt;QShaderBaker::GeneratedShader&gt; &amp;v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>void</type>
            <name>setGeneratedShaderVariants</name>
            <anchorfile>qshaderbaker.html</anchorfile>
            <anchor>setGeneratedShaderVariants</anchor>
            <arglist>(const QVector&lt;QBakedShaderKey::ShaderVariant&gt; &amp;v)</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QBakedShader</type>
            <name>bake</name>
            <anchorfile>qshaderbaker.html</anchorfile>
            <anchor>bake</anchor>
            <arglist>()</arglist>
        </member>
        <member kind="function" protection="public" virtualness="non" static="no">
            <type>QString</type>
            <name>errorMessage</name>
            <anchorfile>qshaderbaker.html</anchorfile>
            <anchor>errorMessage</anchor>
            <arglist>() const const</arglist>
        </member>
    </compound>
</tagfile>
